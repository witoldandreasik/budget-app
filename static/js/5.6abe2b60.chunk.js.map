{"version":3,"sources":["data/fetch/budget.fetch.js","data/fetch/common.fetch.js","data/fetch/index.js","utils/index.js","pages/Budget/components/BudgetTransactionList/BudgetTransactionList.css.js","pages/Budget/components/BudgetTransactionList/BudgetTransactionList.js"],"names":["fetchBudget","key","a","id","console","log","fetch","process","response","json","data","fetchBudgetedCategories","addTransaction","budgetId","method","headers","body","JSON","stringify","fetchAllCategories","budget","common","formatCurrency","value","number","Number","Intl","NumberFormat","style","currency","format","formatDate","string","date","Date","DateTimeFormat","List","styled","ul","ListItem","li","theme","colors","gray","normal","black","spacing","xs","BudgetTransactionList","useQuery","API","allCategories","budgetedCategories","selectedParentCategoryId","useContext","BudgetContext","store","filteredTransactionsBySelectedParentCategory","useMemo","transactions","filter","transaction","some","budgetedCategory","categoryId","find","category","parentCategory","name","error","groupedTransactions","groupBy","getUTCDate","Object","entries","map","description","amount"],"mappings":"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","file":"static/js/5.6abe2b60.chunk.js","sourcesContent":["export const fetchBudget = async (key, { id }) => {\r\n  console.log({ id });\r\n  const response = await fetch(\r\n    `${process.env.REACT_APP_API_URL}/budgets/${id}/?_embed=transactions`\r\n  );\r\n  const data = await response.json();\r\n  return data;\r\n};\r\n\r\nexport const fetchBudgetedCategories = async (key, { id }) => {\r\n  const response = await fetch(\r\n    `${process.env.REACT_APP_API_URL}/budgets/${id}/budgetCategories`\r\n  );\r\n  const data = await response.json();\r\n  return data;\r\n};\r\n\r\nexport const addTransaction = async ({ budgetId, data }) => {\r\n  const response = await fetch(\r\n    `${process.env.REACT_APP_API_URL}/budgets/${budgetId}/transactions/`,\r\n    {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    }\r\n  );\r\n\r\n  return await response.json();\r\n};\r\n","export const fetchAllCategories = async () => {\r\n  const response = await fetch(\r\n    `${process.env.REACT_APP_API_URL}/categories/?_expand=parentCategory`\r\n  );\r\n  const data = await response.json();\r\n  return data;\r\n};\r\n","import * as budget from \"./budget.fetch\";\r\nimport * as common from \"./common.fetch\";\r\nexport default {\r\n  budget,\r\n  common,\r\n};\r\n","export const formatCurrency = (value) => {\r\n  const number = Number(value);\r\n  return new Intl.NumberFormat(\"pl\", {\r\n    style: \"currency\",\r\n    currency: \"PLN\",\r\n  }).format(number);\r\n};\r\n\r\nexport const formatDate = (string) => {\r\n  const date = new Date(string);\r\n  return new Intl.DateTimeFormat(\"pl\").format(date);\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n  margin-left: 3px;\r\n  li {\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n  background-color: ${({ theme }) => theme.colors.gray.normal};\r\n  border: 1px solid ${({ theme }) => theme.colors.black.normal};\r\n  padding: ${({ theme }) => theme.spacing.xs}px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  > *:nth-child(1) {\r\n    flex: 4;\r\n  }\r\n  > *:nth-child(2) {\r\n    flex: 2;\r\n  }\r\n  > *:nth-child(3) {\r\n    flex: 3;\r\n  }\r\n  > *:nth-child(4) {\r\n    flex: 2;\r\n  }\r\n`;\r\n","import React, { useMemo, useContext } from \"react\";\r\n\r\nimport { groupBy } from \"lodash\";\r\nimport { useQuery } from \"react-query\";\r\n\r\nimport { formatCurrency, formatDate } from \"utils\";\r\nimport API from \"data/fetch\";\r\nimport BudgetContext from \"data/context/budget.context\";\r\n\r\nimport { List, ListItem } from \"./BudgetTransactionList.css\";\r\n\r\nfunction BudgetTransactionList() {\r\n  const { data: budget } = useQuery(\r\n    [\"budget\", { id: 1 }],\r\n    API.budget.fetchBudget\r\n  );\r\n  const { data: allCategories } = useQuery(\r\n    \"allCategories\",\r\n    API.common.fetchAllCategories\r\n  );\r\n  const { data: budgetedCategories } = useQuery(\r\n    [\"budgetedCategories\", { id: 1 }],\r\n    API.budget.fetchBudgetedCategories\r\n  );\r\n\r\n  const { selectedParentCategoryId } = useContext(BudgetContext.store);\r\n\r\n  const filteredTransactionsBySelectedParentCategory = useMemo(() => {\r\n    if (typeof selectedParentCategoryId === \"undefined\") {\r\n      return budget.transactions;\r\n    }\r\n\r\n    if (selectedParentCategoryId === null) {\r\n      return budget.transactions.filter((transaction) => {\r\n        const hasBudgetCategory = budgetedCategories.some(\r\n          (budgetedCategory) =>\r\n            budgetedCategory.categoryId === transaction.categoryId\r\n        );\r\n        return !hasBudgetCategory;\r\n      });\r\n    }\r\n\r\n    return budget.transactions.filter((transaction) => {\r\n      try {\r\n        const category = allCategories.find(\r\n          (category) => category.id === transaction.categoryId\r\n        );\r\n        const parentCategoryName = category.parentCategory.name;\r\n        return parentCategoryName === selectedParentCategoryId;\r\n      } catch (error) {\r\n        return false;\r\n      }\r\n    });\r\n  }, [\r\n    allCategories,\r\n    budgetedCategories,\r\n    selectedParentCategoryId,\r\n    budget.transactions,\r\n  ]);\r\n\r\n  const groupedTransactions = useMemo(\r\n    () =>\r\n      groupBy(filteredTransactionsBySelectedParentCategory, (transaction) =>\r\n        new Date(transaction.date).getUTCDate()\r\n      ),\r\n    [filteredTransactionsBySelectedParentCategory]\r\n  );\r\n\r\n  return (\r\n    <List>\r\n      {Object.entries(groupedTransactions).map(([key, transactions]) => (\r\n        <li key={key}>\r\n          <ul>\r\n            {transactions.map((transaction) => (\r\n              <ListItem key={transaction.id}>\r\n                <div>{transaction.description}</div>\r\n                <div>{formatCurrency(transaction.amount)}</div>\r\n                <div>{formatDate(transaction.date)}</div>\r\n                <div>\r\n                  {\r\n                    (\r\n                      allCategories.find(\r\n                        (category) => category.id === transaction.categoryId\r\n                      ) || {}\r\n                    ).name\r\n                  }\r\n                </div>\r\n              </ListItem>\r\n            ))}\r\n          </ul>\r\n        </li>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default BudgetTransactionList;\r\n"],"sourceRoot":""}